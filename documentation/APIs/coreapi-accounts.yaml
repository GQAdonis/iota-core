openapi: 3.0.3
info:
  title: IOTA CORE REST API
  description: This document specifies the REST API for IOTA CORE node software.
  contact:
    email: contact@iota.org
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 3.0.0
externalDocs:
  description: Find out more about IOTA
  url: 'https://iota.org'
servers:
  - url: 'http://127.0.0.1:14265'
tags:
  - name: node
    description: Everything about the node itself.
  - name: congestion
    description: Everything about the congestion.
  - name: accounts
    description: Everything about the accounts.
  - name: rewards
    description: Everything about the accounts.
  - name: staking
    description: Everything about the node itself.
  - name: committee
    description: Everything about the committee.
  - name: blocks
    description: Everything about blocks.
  - name: UTXO
    description: Everything about UTXOs.
  - name: commitments
    description: Everything about commitments.
  - name: peers
    description: Everything about the peers of the node.
  - name: control
    description: Everything about controlling the node.
paths:
  /health:
    get:
      tags:
        - node
      summary: Returns the health of the node.
      description: >-
        Returns the health of the node. A node considers itself healthy if it is bootstrapped and its Accepted Tangle Time (ATT) is not 
        further behind its local clock than BootstrapWindow.
      responses:
        '200':
          description: "Successful operation: indicates that the node is healthy."
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
        '503':
          description: "Unsuccessful operation: indicates that the node isn´t healthy."

  /api/routes:
    get:
      tags:
        - node
      summary: Returns the available API route groups of the node.
      description: >-
        Returns the available API route groups of the node.
      responses:
        '200':
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoutesResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-routes-response-example'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
        '503':
          description: "Unsuccessful operation: indicates that the node isn´t healthy."

  /api/core/v3/info:
    get:
      tags:
        - node
      summary: Returns general information about the node.
      description: Returns general information about the node.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-info-response-example'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'

  '/api/core/v3/congestion':
    get:
      tags:
        - congestion
      summary: Check readiness of the node to issue a new block, and the mana cost based on the rate setter and current network congestion.
      description: >-
        Check readiness of the node to issue a new block based on the rate setter and current network congestion. If no accountID is provided in the
        query string parameter, return the congestion info of the node that the request is sent to.
      parameters:
        - in: query
          name: accountID
          schema:
            type: string
          example: "did:iota:123456789abcdefghi"
          required: false
          description: Identifier of the account to be checked for readines.
        - in: query
          name: slotIndex
          schema:
            type: integer
          example: 1622568540
          required: false
          description: Check the cost and issuance readiness for a specific slot index.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CongestionResponse'
              examples:
                CongestionResponse:
                  $ref: '#/components/examples/get-congestion-estimate-response-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'


  /api/core/v3/accounts/{accountId}/status:
    get:
      tags:
        - accounts
      summary: Returns information of an account.
      description: >-
        Returns information that are ideal for attaching a block. If slotIndex is not provided, the returned status would be current slot index. 
      parameters:
        - in: query
          name: slotIndex
          schema:
            type: integer
          example: 1622568540
          required: false
          description: Check the account status for a specific slot index.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountResponse'

  /api/core/v3/accounts/{accountId}/mana:
    get:
      tags:
        - accounts
      summary: Returns the potential and stored mana of the account. If slotIndex is not provided, the returned status would be current slot index. 
      description: >-
        Returns mana of an account.
      parameters:
        - in: query
          name: slotIndex
          schema:
            type: integer
          example: 1622568540
          required: false
          description: Check the mana of an account for a specific slot index.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountManaResponse'

  /api/core/v3/rewards/{outputId}:
    get:
      tags:
        - rewards
      summary: Returns the totally available rewards of the output ID. 
      description: >-
        Returns mana of an account.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountManaResponse'

  /api/core/v3/committee:
    get:
      tags:
        - committee
      summary: Return the information of committee members. 
      description: >-
        TODO, performance factor, total pool stake
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStakingResponse'

  /api/core/v3/staking/{accountId}:
    get:
      tags:
        - staking
      summary: TODO, return performance factor of the account, total pool stake.
      description: >-
        Returns mana of an account.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountStakingResponse'

  /api/core/v3/blocks/issuance:
    get:
      tags:
        - blocks
      summary: Returns information that are ideal for attaching a block.
      description: >-
        Returns information that are ideal for attaching a block.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceBlockHeaderResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-buildingBlock-response-example'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that there are no tips available or the node isn´t synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  /api/core/v3/blocks:
    post:
      tags:
        - blocks
      summary: Submit a block.
      description: >-
        Submit a block or a payload. This endpoint will return the identifier of the built block. `protocolVersion` is always required!
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitBlockRequest'
            examples:
              Minimal block with Tagged Data Payload:
                $ref: "#/components/examples/post-tagged-data-block-request-example-minimal"
              Full block with Tagged Data Payload:
                $ref: >-
                  #/components/examples/post-tagged-data-block-request-example-full
              Minimal Block with Transaction Payload:
                $ref: >-
                  #/components/examples/post-transaction-block-request-example-minimal
              Full block with Transaction Payload:
                $ref: >-
                  #/components/examples/post-transaction-block-request-example-full
          application/vnd.iota.serializer-v1:
            schema:
              type: string
              format: binary
              description: block in raw binary format
        required: true
      responses:
        '201':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubmitBlockResponse'
              examples:
                default:
                  $ref: '#/components/examples/post-blocks-response-example'
          headers:
            Location:
              description: The blockId of the newly created block.
              schema:
                type: string
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node can´t auto-fill the parents or perform Proof-of-Work."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'
  /api/core/v3/blocks/{blockId}:
    get:
      tags:
        - blocks
      summary: Returns block data as JSON by its identifier.
      description: >-
        Find a block by its identifier. This endpoint returns the given block
        as JSON.
      parameters:
        - in: path
          name: blockId
          schema:
            type: string
          example: "0xf532a53545103276b46876c473846d98648ee418468bce76df4868648dd73e5d"
          required: true
          description: Identifier of the block.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
              examples:
                Empty Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-empty-response-example
                Transaction Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-transaction-response-example
                Tagged Data Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-tagged-data-response-example
            application/vnd.iota.serializer-v1:
              schema:
                type: string
                format: binary
                description: block in raw binary format
                example: >-
                  0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000eb000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000020000016920b176f613ec7be59e68fc68f597eb3393af80f74c7c3db78198147d5f1f92640000000000000000018afe1f314622cc1ef52f16d619d1baccff81816b7e4e35fe268dc247b730acd65d5d2dd3f7df09000000000001000001f7868ab6bb55800b77b8b74191ad8285a9bf428ace579d541fda47661803ff44e0af5c34ad4edf475a01fb46e089a7afcab158b4a0133f32e889083e1c77eef65548933e0c6d2c3b0ac006cd77e77d778bf37b8d38d219fb62a9a2f718d4c9095100000000000000
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/blocks/{blockId}/metadata':
    get:
      tags:
        - blocks
      summary: Find the metadata of a given block.
      description: >-
        Find the metadata of a given block.
      parameters:
        - in: path
          name: blockId
          schema:
            type: string
          example: "0xf532a53545103276b46876c473846d98648ee418468bce76df4868648dd73e5d"
          required: true
          description: Identifier of the block.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockMetadataResponse'
              examples:
                New Block with Transaction Payload:
                  $ref: '#/components/examples/get-block-by-id-response-example-new-transaction'
                New Block without Transaction Payload:
                  $ref: '#/components/examples/get-block-by-id-response-example-new'
                Confirmed with Transaction Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-response-example-confirmed-transaction
                Confirmed without Transaction Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-response-example-confirmed
                Conflicting with Transaction Payload:
                  $ref: >-
                    #/components/examples/get-block-by-id-response-example-conflicting-transaction
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  '/api/core/v3/outputs/{outputId}':
    get:
      tags:
        - UTXO
      summary: Find an output by its identifier.
      description: Find an output by its identifier.
      parameters:
        - in: path
          name: outputId
          schema:
            type: string
          required: true
          description: >-
            Identifier of the output encoded in hex. An output is identified by
            the concatenation of `transactionId+outputIndex` where `outputIndex` needs to be converted to little endian first.
            Hex-encoded with 0x prefix.
          example: "0xfa0de75d225cca2799395e5fc340702fc7eac821d2bdd79911126f131ae097a20100"
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-outputs-by-id-response-example'
            application/vnd.iota.serializer-v1:
              schema:
                type: string
                format: binary
                description: output in raw binary format
                example: >-
                  0440420f00000000000004056b0c542e18ac5f44a1c13c5922564b7accba030000000000010000000204007ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d305007ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d30200007ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d30203000102030101007ffec9e1233204d9c6dce6812b1539ee96af691ca2e4d9065daa85907d33e5d3
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/outputs/{outputId}/metadata':
    get:
      tags:
        - UTXO
      summary: Returns metadata about an output by its identifier.
      description: Returns metadata about an output by its identifier.
      parameters:
        - in: path
          name: outputId
          schema:
            type: string
          required: true
          description: >-
            Identifier of the output encoded in hex. An output is identified by
            the concatenation of `transactionId+outputIndex` where `outputIndex` (u16) needs to be converted to little endian first.
            Hex-encoded with 0x prefix.
          example: "0xfa0de75d225cca2799395e5fc340702fc7eac821d2bdd79911126f131ae097a20100"
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputMetadataResponse'
              examples:
                unspent:
                  $ref: '#/components/examples/get-output-metadata-by-id-response-unspent-example'
                spent:
                  $ref: '#/components/examples/get-output-metadata-by-id-response-spent-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'

  
  '/api/core/v3/transactions/{transactionId}/included-block':
    get:
      tags:
        - UTXO
      summary: Returns the earliest block containing the tranaction that get confirmed.
      description: Returns the earliest block containing the transaction that get confirmed.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          example: "0xaf7579fb57746219561072c2cc0e4d0fbb8d493d075bd21bf25ae81a450c11ef"
          required: true
          description: Identifier of the transaction to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-block-by-id-transaction-response-example'
            application/vnd.iota.serializer-v1:
              schema:
                type: string
                format: binary
                description: block in raw binary format
                example: >-
                  0204174e3151f6ce2cfb7f00829ac4a96a35caa2078cc20eba99359867cd21aad0d65807bb4ad068e6cdadd103218e4e24ed55b62c985d4f64e97808d9f09180f89c7a09324557e9200f39bf493fc8fd6ac43e9ca750c6f6d884cc72386ddcb7d695de9e9d780ba7ebeebc38da16cb53b2a8991d38eee94bcdc3f3ef99aa8c345652530100000600000001c9b000b41dc00400010000af7579fb57746219561072c2cc0e4d0fbb8d493d075bd21bf25ae81a450c11ef00000e6c2998f5177834ecb3bae1596d5056af76e487386eecb19727465b4be86a79010003a08601000000000000010000a18996d96163405e3c0eb13fa3459a07f68a89e8cf7cc239c89e7192344daa5b0069000000050000000b68656c6c6f20776f726c64550000005370616d6d696e6720646174612e0a436f756e743a203037323935320a54696d657374616d703a20323032312d30322d31315431303a32333a34392b30313a30300a54697073656c656374696f6e3a203934c2b57301000000ee26ac07834c603c22130fced361ca58552b0dbfc63e4b73ba24b3b59d9f40500492a353f96883c472e2686a640e77eda30be8fcc417aa9fc1c15eae854661e0253287be6ea68f649f19ca590de0a6c57fb88635ef0e013310e0be2b8360950350390000000000f0
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/transactions/{transactionId}/included-block/metadata':
    get:
      tags:
      - UTXO
      summary: Find the metadata of the earliest block containing the transaction that get confirmed.
      description: >-
        Find the metadata of the earliest block containing the tx that get confirmed.
      parameters:
        - in: path
          name: transactionId
          schema:
            type: string
          example: "0xaf7579fb57746219561072c2cc0e4d0fbb8d493d075bd21bf25ae81a450c11ef"
          required: true
          description: Identifier of the transaction to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockMetadataResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-block-by-id-response-example-confirmed-transaction'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
        '503':
          description: "Unsuccessful operation: indicates that the node is not synced."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceUnavailableResponse'

  '/api/core/v3/commitments/{commitmentId}':
    get:
      tags:
        - commitments
      summary: Look up a commitment by a given commitment ID.
      description: Look up a commitment by a given commitment ID.
      parameters:
        - in: path
          name: commitmentId
          schema:
            type: string
          example: "0x7a09324557e9200f39bf493fc8fd6ac43e9ca750c6f6d884cc72386ddcb7d695"
          required: true
          description: Commitment ID of the commitment to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commitment'
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-commitment-response-example
            application/vnd.iota.serializer-v1:
              schema:
                type: string
                format: binary
                description: Commitment in raw binary format
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-commitment-response-binary-example
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/commitments/{commitmentId}/utxo-changes':
    get:
      tags:
        - commitments
      summary: Get all UTXO changes of a given slot by commitment ID.
      description: Get all UTXO changes of a given slot by Commitment ID.
      parameters:
        - in: path
          name: commitmentId
          schema:
            type: string
          example: "0x7a09324557e9200f39bf493fc8fd6ac43e9ca750c6f6d884cc72386ddcb7d695"
          required: true
          description: Commitment ID of the commitment to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UTXOChangesResponse'
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-utxo-changes-response-example
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/commitments/by-index/{index}':
    get:
      tags:
        - commitments
      summary: Look up a commitment by a given commitment index.
      description: Look up a commitment by a given commitment index.
      parameters:
        - in: path
          name: index
          schema:
            type: number
          example: 154862
          required: true
          description: Index of the commitment to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Commitment'
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-commitment-response-example
            application/vnd.iota.serializer-v1:
              schema:
                type: string
                format: binary
                description: Commitment in raw binary format
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-commitment-response-binary-example
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/commitments/by-index/{index}/utxo-changes':
    get:
      tags:
        - commitments
      summary: Get all UTXO changes of a given slot by commitment index.
      description: Get all UTXO changes of a given slot by commitment index.
      parameters:
        - in: path
          name: index
          schema:
            type: number
          example: 154862
          required: true
          description: Index of the commitment to look up.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UTXOChangesResponse'
              examples:
                default:
                  $ref: >-
                    #/components/examples/get-utxo-changes-response-example
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'


  /api/core/v3/peers:
    get:
      tags:
        - peers
      summary: Get information about the peers of the node.
      description: Get information about the peers of the node.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeersResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-peers-response-example'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
    post:
      tags:
        - peers
      summary: Add a given peer to the node.
      description: Add a given peer to the node.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddPeerRequest'
            examples:
              default:
                $ref: '#/components/examples/post-peer-request-example'
        required: true
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AddPeerResponse'
              examples:
                default:
                  $ref: '#/components/examples/post-peer-response-example'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
  '/api/core/v3/peers/{peerId}':
    get:
      tags:
        - peers
      summary: Get information about a given peer.
      description: Get information about a given peer.
      parameters:
        - in: path
          name: peerId
          schema:
            type: string
          example: 12D3KooWMajsSUxSUFb3CRgmJvygYCGd27uMDdppVYNGud7xuKG5
          required: true
          description: Identifier of the block.
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PeerResponse'
              examples:
                default:
                  $ref: '#/components/examples/get-peer-response-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'
    delete:
      tags:
        - peers
      summary: Remove/disconnect a given peer.
      description: Remove/disconnect a given peer.
      parameters:
        - in: path
          name: peerId
          schema:
            type: string
          example: 12D3KooWMajsSUxSUFb3CRgmJvygYCGd27uMDdppVYNGud7xuKG5
          required: true
          description: Identifier of the peer.
      responses:
        '204':
          description: "Successful operation."
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."

  '/api/core/v3/control/database/prune':
    post:
      tags:
        - control
      summary: Prunes the node database.
      description: Prunes the node database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PruneDatabaseRequest'
            examples:
              default:
                $ref: '#/components/examples/database-prune-request-example'
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PruneDatabaseResponse'
              examples:
                default:
                  $ref: '#/components/examples/database-prune-response-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'

  '/api/core/v3/control/snapshot/create':
    post:
      tags:
        - control
      summary: Creates a new snapshot.
      description: Creates a new snapshot.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSnapshotRequest'
            examples:
              Full Snapshot:
                $ref: '#/components/examples/create-full-snapshot-request-example'
              Delta Snapshot:
                $ref: '#/components/examples/create-delta-snapshot-request-example'
      responses:
        '200':
          description: "Successful operation."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSnapshotResponse'
              examples:
                Full Snapshot:
                  $ref: '#/components/examples/create-full-snapshot-response-example'
                Delta Snapshot:
                  $ref: '#/components/examples/create-delta-snapshot-response-example'
        '400':
          description: "Unsuccessful operation: indicates that the provided data is invalid."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '403':
          description: "Unsuccessful operation: indicates that the endpoint is not available for public use."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ForbiddenResponse'
        '404':
          description: "Unsuccessful operation: indicates that the requested data was not found."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFoundResponse'
        '500':
          description: "Unsuccessful operation: indicates that an unexpected, internal server error happened which prevented the node from fulfilling the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalErrorResponse'

components:
  examples:
    get-routes-response-example:
      value:
        routes:
          - "core/v3"
          - "dashboard-metrics/v2"
          - "debug/v2"
    get-info-response-example:
      value:
        name: Example Node
        version: 1.0.0
        accountId: "0x11a37a8e65fe5dca25cbeb896000eca615eaf88b97ca8dc70d8b1839b53dbf1c"
        status:
          isHealthy: true
          lastAcceptedBlockId: "0x8d6f3b6e3a63ce388d2eb8c927c5b9ba328b0e427ae727d8b3dddc429f6fb24a0000000000000000"
          lastConfirmedBlockId: "0x59daaaba1cd10cd268966376e17710d100c90826fe258753d461acac99b7e3341500000000000000"
          finalizedSlot: 100
          ATT: 1682328545
          RATT: 1682328550
          CTT: 1682328525
          RCTT: 1682328535
          latestCommittedSlot: 107
          pruningSlot: 20
        metrics:
          blocksPerSecond: 17
          confirmedBlocksPerSecond: 16.2
          confirmedRate: 98.82352941176471
        supportedProtocolVersions:
          - 2
          - 3
        protocol:
          networkName: iota-core-testnet
          bech32Hrp: rms
          tokenSupply: "2779530283277761"
          version: 3
          minPowScore: 1000
          belowMaxDepth: 15
          rentStructure:
            vByteCost: 500
            vByteFactorData: 1
            vByteFactorKey: 10
          genesisUnixTimestamp: 1582328545
          slotDurationInSeconds: 10
        baseToken:
          baseToken:
          name: "Shimmer"
          tickerSymbol: "SMR"
          unit: "SMR"
          decimals: 6
          subunit: "glow"
          useMetricPrefix: false
        features:
          - pow
          - consensus

    get-buildingBlock-response-example:
      value:
        strongParents:
          - "0x4f746934d0075179a37ca3e807b7e793ec4ec9189ba31c9ad092d7497b01118c1000000000000000"
          - "0x59daaaba1cd10cd268966376e17710d100c90826fe258753d461acac99b7e3341500000000000000"
        weakParents:
          - "0xebb058f1f1c8f1ac6508465deeee1dd090396f9e6e2b5c103eef5583f20a0c133a00000000000000"
          - "0xb173e2d2b6f72600f00da84492ddb6eadee703dc39fb846725828059272093fb3b00000000000000"
        shallowLikeParents:
          - "0xdbf86c778d69f413296c2d4d3086d76c74bf4d719e6e95c03a3d9a955ed39bcf3e00000000000000"
          - "0xf15b2ec698e396c9d2e69bc753246631aedebb657da09ba0e0c8d42518a1e8953e00000000000000"
        latestFinalizedSlot: 1422
        commitment:
          index: 1432
          prevId: "0xbf07dc16986166953f5a72c19d78642aab6cbde63964a2369ec3d425144eb42b3800000000000000"
          rootsId: "0xa4dd36465af63d495d35a05f592d42a51511c153e1bae8fad00453c8cbb48727"
          cumulativeWeight: 45678

    post-blocks-response-example:
      value:
        blockId: "0xb173e2d2b6f72600f00da84492ddb6eadee703dc39fb846725828059272093fb3b00000000000000"

    get-block-by-id-response-example-new-transaction:
      value:
        blockId: "0x8e7c2d36c236f7d44f26cf8c70b3d99e18e7d7390b32c9637c08c086d9475e6a"
        strongParents:
          - "0x1e9d7f2e12552f84db6de00d57d25c7fa037fca5c31b5a354b9e6d2f6d84a6db"
          - "0x6c91ee6f97a8a04ec92f9a6907baa32bca3c7cb15e83e0070ef0ba4f3f3a2e47"
        blockState: "pending"
        txState: "pending"
        reissuePayload: false
    
    get-block-by-id-response-example-new:
      value:
        blockId: "0x8e7c2d36c236f7d44f26cf8c70b3d99e18e7d7390b32c9637c08c086d9475e6a"
        strongParents:
          - "0x1e9d7f2e12552f84db6de00d57d25c7fa037fca5c31b5a354b9e6d2f6d84a6db"
          - "0x6c91ee6f97a8a04ec92f9a6907baa32bca3c7cb15e83e0070ef0ba4f3f3a2e47"
        blockState: "pending"
        reissuePayload: false

    get-block-by-id-response-example-confirmed-transaction:
      value:
        blockId: "0x8e7c2d36c236f7d44f26cf8c70b3d99e18e7d7390b32c9637c08c086d9475e6a"
        strongParents:
          - "0x1e9d7f2e12552f84db6de00d57d25c7fa037fca5c31b5a354b9e6d2f6d84a6db"
          - "0x6c91ee6f97a8a04ec92f9a6907baa32bca3c7cb15e83e0070ef0ba4f3f3a2e47"
        blockState: "confirmed"
        txState: "confirmed"

    get-block-by-id-response-example-confirmed:
      value:
        blockId: "0x8e7c2d36c236f7d44f26cf8c70b3d99e18e7d7390b32c9637c08c086d9475e6a"
        strongParents:
          - "0x1e9d7f2e12552f84db6de00d57d25c7fa037fca5c31b5a354b9e6d2f6d84a6db"
          - "0x6c91ee6f97a8a04ec92f9a6907baa32bca3c7cb15e83e0070ef0ba4f3f3a2e47"
        blockState: "confirmed"

    get-block-by-id-response-example-conflicting-transaction:
      value:
        blockId: "0x8e7c2d36c236f7d44f26cf8c70b3d99e18e7d7390b32c9637c08c086d9475e6a"
        strongParents:
          - "0x1e9d7f2e12552f84db6de00d57d25c7fa037fca5c31b5a354b9e6d2f6d84a6db"
          - "0x6c91ee6f97a8a04ec92f9a6907baa32bca3c7cb15e83e0070ef0ba4f3f3a2e47"
        blockState: "pending"
        txState: "pending"
        blockStateReason: 1
        txStateReason: 5

    post-tagged-data-block-request-example-minimal:
      value:
        protocolVersion: 3
        payload:
          type: 5
          tag: "0x72616e646f6d207461673a206769746875622e636f6d"
          data: "0x5468697320697320616e206578616d706c6520746578742077616c6c20776974682070726f746f636f6c20332e"

    post-transaction-block-request-example-minimal:
      value:
        protocolVersion: 3
        payload:
          type: 6
          essence:
            type: 1
            networkId: "1337133713371337"
            creationTime: 1682328545
            inputsCommitment: "0x0e6c2998f5177834ecb3bae1596d5056af76e487386eecb19727465b4be86a79"
            inputs:
              - type: 0
                transactionId: "0x0c78e998f5177834ecb3bae1596d5056af76e487386eecb19727465b4be86a79"
                transactionOutputIndex: 0
              - type: 0
                transactionId: "0x309b169bfa60c8cf80afd730741862d200405d5df7cabfe9b564361dce1f7036"
                transactionOutputIndex: 0
              - type: 0
                transactionId: "0xc138ecdc882010245e9574fbc1f1f43cc7c182fa890e46e018365dd49de0f16e"
                transactionOutputIndex: 0
            outputs:
              - type: 3
                amount: "50000000"
                unlockConditions:
                  - type: 0
                    address:
                      type: 0
                      pubKeyHash: "0xd49931814e6bfbb8e221f1b2936e206e5a6b6abeb9c070f8603814c525c9abe3"
          unlocks:
            - type: 0
              signature:
                type: 0
                publicKey: "0x40d0c00fd629a5f528e4bcab4333926a90d06613a3f36a325defcdaf4c9e4092"
                signature: "0xed4a63a3e1b22c85f9813b00a21c8576ed72c1f5bc939d01fcea7dcd678c2d0d8d80a2499965d8ce5574c9e92aa0d42b72b969bab3a2a35fe7dbc64659a0d703"
            - type: 1
              reference: 0
            - type: 1
              reference: 0

    post-tagged-data-block-request-example-full:
      value:
        protocolVersion: 3
        networkId: 10
        strongParents:
          - "0x8d6f3b6e3a63ce388d2eb8c927c5b9ba328b0e427ae727d8b3dddc429f6fb24a0000000000000000"
          - "0x408a53af982c49d1398ab5c5b5f5b390d4c4da7da48b61bb9ba7f97c1e8dd7f60000000000000000"
        weakParents:
          - "0xe8a904ce3ee081f20a68bb38b2d406cfd138775ba52ea555d93a4e4d4b0ad8440000000000000000"
          - "0xbce912a0f383cd07660d3c08f3d3f3c7fb9de31e2cc1b93d4c29332ef693ba0c0000000000000000"
        shallowLikeParents:
          - "0x0276d29ec6b3cbbf3ed6d1f01af8e29b9c6a9ee9c9375e8e5b5b5c5b5b5d45580000000000000000"
          - "0x70a5ce5d8fc3290a9885b1af5d8766d51db89a67a6a839f6d23a6cb8d6f3b6e30000000000000000"
        accountId: "0x11a37a8e65fe5dca25cbeb896000eca615eaf88b97ca8dc70d8b1839b53dbf1c"
        issuerPublicKey: "0xc6c83a78d06263ca937f21056a32d9b3099d04f0c92863d8b8dceabdd1421d2a"
        issuingTime: 1649442459
        commitment:
          index: 110
          prevId: "0x78bf1e6c30c6ed9192fa07e1466c09a10e9ea6c58d3b1b6c61a259f1a6f569ed0000000000000000"
          rootsId: "0xa4dd36465af63d495d35a05f592d42a51511c153e1bae8fad00453c8cbb48727"
          cumulativeWeight: 12345
        latestFinalizedSlot: 98
        payload:
          type: 5
          tag: "0x72616e646f6d207461673a206769746875622e636f6d"
          data: "0x5468697320697320616e206578616d706c6520746578742077616c6c20776974682070726f746f636f6c20332e"
        nonce: "105368"
        signature: "0xd2215b9307c272eb12ea42c18768b9e133ed5b674abc23c577f5096520e433c807930497ed3f90498a7c82bbc1a730f20201413b10a30cd8737403fdbb63bf874966ca205f25e790a8860fbc152a9775e430b9618cd6282d2a0d29969412de07"


    post-transaction-block-request-example-full:
      value:
        protocolVersion: 3
        networkId: 10
        strongParents:
          - "0x8d6f3b6e3a63ce388d2eb8c927c5b9ba328b0e427ae727d8b3dddc429f6fb24a0000000000000000"
          - "0x408a53af982c49d1398ab5c5b5f5b390d4c4da7da48b61bb9ba7f97c1e8dd7f60000000000000000"
        weakParents:
          - "0xe8a904ce3ee081f20a68bb38b2d406cfd138775ba52ea555d93a4e4d4b0ad8440000000000000000"
          - "0xbce912a0f383cd07660d3c08f3d3f3c7fb9de31e2cc1b93d4c29332ef693ba0c0000000000000000"
        shallowLikeParents:
          - "0x0276d29ec6b3cbbf3ed6d1f01af8e29b9c6a9ee9c9375e8e5b5b5c5b5b5d45580000000000000000"
          - "0x70a5ce5d8fc3290a9885b1af5d8766d51db89a67a6a839f6d23a6cb8d6f3b6e30000000000000000"
        accountId: "0x11a37a8e65fe5dca25cbeb896000eca615eaf88b97ca8dc70d8b1839b53dbf1c"
        issuerPublicKey: "0xc6c83a78d06263ca937f21056a32d9b3099d04f0c92863d8b8dceabdd1421d2a"
        issuingTime: 1649442459
        commitment:
          index: 110
          prevId: "0x78bf1e6c30c6ed9192fa07e1466c09a10e9ea6c58d3b1b6c61a259f1a6f569ed0000000000000000"
          rootsId: "0xa4dd36465af63d495d35a05f592d42a51511c153e1bae8fad00453c8cbb48727"
          cumulativeWeight: 12345
        latestFinalizedSlot: 98
        payload:
          type: 6
          essence:
            type: 1
            networkId: "1337133713371337"
            creationTime: 1649442459
            inputsCommitment: "0x0e6c2998f5177834ecb3bae1596d5056af76e487386eecb19727465b4be86a79"
            inputs:
              - type: 0
                transactionId: "0x0c78e998f5177834ecb3bae1596d5056af76e487386eecb19727465b4be86a79"
                transactionOutputIndex: 0
              - type: 0
                transactionId: "0x309b169bfa60c8cf80afd730741862d200405d5df7cabfe9b564361dce1f7036"
                transactionOutputIndex: 0
              - type: 0
                transactionId: "0xc138ecdc882010245e9574fbc1f1f43cc7c182fa890e46e018365dd49de0f16e"
                transactionOutputIndex: 0
            outputs:
              - type: 3
                amount: "50000000"
                unlockConditions:
                  - type: 0
                    address:
                      type: 0
                      pubKeyHash: "0xd49931814e6bfbb8e221f1b2936e206e5a6b6abeb9c070f8603814c525c9abe3"
            payload:
          unlocks:
            - type: 0
              signature:
                type: 0
                publicKey: "0x40d0c00fd629a5f528e4bcab4333926a90d06613a3f36a325defcdaf4c9e4092"
                signature: "0xed4a63a3e1b22c85f9813b00a21c8576ed72c1f5bc939d01fcea7dcd678c2d0d8d80a2499965d8ce5574c9e92aa0d42b72b969bab3a2a35fe7dbc64659a0d703"
            - type: 1
              reference: 0
            - type: 1
              reference: 0
        nonce: "105368"
        signature: "0xd2215b9307c272eb12ea42c18768b9e133ed5b674abc23c577f5096520e433c807930497ed3f90498a7c82bbc1a730f20201413b10a30cd8737403fdbb63bf874966ca205f25e790a8860fbc152a9775e430b9618cd6282d2a0d29969412de07"
    
    get-congestion-estimate-response-example:
      value:

    get-block-by-id-empty-response-example:
      value:
        protocolVersion: 3
        networkId: 10
        strongParents:
          - "0x8d6f3b6e3a63ce388d2eb8c927c5b9ba328b0e427ae727d8b3dddc429f6fb24a0000000000000000"
          - "0x408a53af982c49d1398ab5c5b5f5b390d4c4da7da48b61bb9ba7f97c1e8dd7f60000000000000000"
        accountId: "0x11a37a8e65fe5dca25cbeb896000eca615eaf88b97ca8dc70d8b1839b53dbf1c"
        issuerPublicKey: "0xc6c83a78d06263ca937f21056a32d9b3099d04f0c92863d8b8dceabdd1421d2a"
        issuingTime: 1649442459
        commitment:
          index: 110
          prevId: "0x78bf1e6c30c6ed9192fa07e1466c09a10e9ea6c58d3b1b6c61a259f1a6f569ed0000000000000000"
          rootsId: "0xa4dd36465af63d495d35a05f592d42a51511c153e1bae8fad00453c8cbb48727"
          cumulativeWeight: 12345
        latestFinalizedSlot: 98
        nonce: '8423'
        signature: "0xd2215b9307c272eb12ea42c18768b9e133ed5b674abc23c577f5096520e433c807930497ed3f90498a7c82bbc1a730f20201413b10a30cd8737403fdbb63bf874966ca205f25e790a8860fbc152a9775e430b9618cd6282d2a0d29969412de07"

    get-block-by-id-transaction-response-example:
      value:
        protocolVersion: 3
        networkId: 10
        strongParents:
          - "0x8d6f3b6e3a63ce388d2eb8c927c5b9ba328b0e427ae727d8b3dddc429f6fb24a0000000000000000"
          - "0x408a53af982c49d1398ab5c5b5f5b390d4c4da7da48b61bb9ba7f97c1e8dd7f60000000000000000"
        weakParents:
          - "0xe8a904ce3ee081f20a68bb38b2d406cfd138775ba52ea555d93a4e4d4b0ad8440000000000000000"
          - "0xbce912a0f383cd07660d3c08f3d3f3c7fb9de31e2cc1b93d4c29332ef693ba0c0000000000000000"
        shallowLikeParents:
          - "0x0276d29ec6b3cbbf3ed6d1f01af8e29b9c6a9ee9c9375e8e5b5b5c5b5b5d45580000000000000000"
          - "0x70a5ce5d8fc3290a9885b1af5d8766d51db89a67a6a839f6d23a6cb8d6f3b6e30000000000000000"
        accountId: "0x11a37a8e65fe5dca25cbeb896000eca615eaf88b97ca8dc70d8b1839b53dbf1c"
        issuerPublicKey: "0xc6c83a78d06263ca937f21056a32d9b3099d04f0c92863d8b8dceabdd1421d2a"
        issuingTime: 1649442459
        commitment:
          index: 2310
          prevId: "0x78bf1e6c30c6ed9192fa07e1466c09a10e9ea6c58d3b1b6c61a259f1a6f569ed0000000000000000"
          rootsId: "0xa4dd36465af63d495d35a05f592d42a51511c153e1bae8fad00453c8cbb48727"
          cumulativeWeight: 12345
        latestFinalizedSlot: 98
        payload:
          type: 6
          essence:
            type: 1
            networkId: "1337133713371337"
            creationTime: 1649442459
            inputsCommitment: "0x0e6c2998f5177834ecb3bae1596d5056af76e487386eecb19727465b4be86a79"
            inputs:
              - type: 0
                transactionId: "0x0c78e998f5177834ecb3bae1596d5056af76e487386eecb19727465b4be86a79"
                transactionOutputIndex: 0
              - type: 0
                transactionId: "0x309b169bfa60c8cf80afd730741862d200405d5df7cabfe9b564361dce1f7036"
                transactionOutputIndex: 0
              - type: 0
                transactionId: "0xc138ecdc882010245e9574fbc1f1f43cc7c182fa890e46e018365dd49de0f16e"
                transactionOutputIndex: 0
            outputs:
              - type: 3
                amount: "50000000"
                unlockConditions:
                  - type: 0
                    address:
                      type: 0
                      pubKeyHash: "0xd49931814e6bfbb8e221f1b2936e206e5a6b6abeb9c070f8603814c525c9abe3"
            payload:
          unlocks:
            - type: 0
              signature:
                type: 0
                publicKey: "0x40d0c00fd629a5f528e4bcab4333926a90d06613a3f36a325defcdaf4c9e4092"
                signature: "0xed4a63a3e1b22c85f9813b00a21c8576ed72c1f5bc939d01fcea7dcd678c2d0d8d80a2499965d8ce5574c9e92aa0d42b72b969bab3a2a35fe7dbc64659a0d703"
            - type: 1
              reference: 0
            - type: 1
              reference: 0
        nonce: "105368"
        signature: "0xd2215b9307c272eb12ea42c18768b9e133ed5b674abc23c577f5096520e433c807930497ed3f90498a7c82bbc1a730f20201413b10a30cd8737403fdbb63bf874966ca205f25e790a8860fbc152a9775e430b9618cd6282d2a0d29969412de07"


    get-block-by-id-tagged-data-response-example:
      value:
        protocolVersion: 3
        networkId: 10
        strongParents:
          - "0x2f746934d0075179a37ca3e807b7e793ec4ec9189ba31c9ad092d7497b01118c1000000000000000"
          - "0x1a4b52759a4a4e879d38478139913f71c6fcd2ee76c924e5be2b9c9321d61f6e1000000000000000"
          - "0xb55045d5d57818e93b2c9e75f5e328ce5a04f3db3a5a5cf44949f7c8e4d0b4f10000000000000000"
        weakParents:
          - "0xa5ee03d7196d7ab8c0d61740f9c91e16b2bc33d82a22b531c71ccf117951682d1000000000000000"
          - "0x3d1b7b51c66e2b06c1e819d82e7f20d1870c753bd25d19aae78a8b70e06b1aef1000000000000000"
          - "0xd2ca3ef0f7d2f0b2d02e857cbe77f33a3bce54cf3d3c5f0446b7f6da3d8a3ea8000000000000000"
        shallowLikeParents:
          - "0x4f746934d0075179a37ca3e807b7e793ec4ec9189ba31c9ad092d7497b01118c1000000000000000"
          - "0xc9e87d77b547deea65e7f1a36d125ef7c901139bebb3158e76ee1e9b71dcbfe4000000000000000"
          - "0x2d237c37248f1e833c08a1189f9a69c0b3f8c3e039d14291ab7e60a88c4f4d3c000000000000000"
        accountId: "0x11a37a8e65fe5dca25cbeb896000eca615eaf88b97ca8dc70d8b1839b53dbf1c"
        issuerPublicKey: "0xc6c83a78d06263ca937f21056a32d9b3099d04f0c92863d8b8dceabdd1421d2a"
        issuingTime: 1649442459
        commitment:
          index: 928
          prevId: "0x6dcf06b23919b4d4c1c4d1f51af7e510618a2cecb7f2d4c4d0b4a4deef531b7e0000000000000000"
          rootsId: "0xa4dd36465af63d495d35a05f592d42a51511c153e1bae8fad00453c8cbb48727"
          cumulativeWeight: 98765
        latestFinalizedSlot: 98
        payload:
          type: 5
          tag: "0x68656c6c6f20776f726c64"
          data: "0x5370616d6d696e6720646174612e0a436f756e743a203037323935320a54696d657374616d703a20323032312d30322d31315431303a32333a34392b30313a30300a54697073656c656374696f6e3a203934c2b573"
        nonce: "105368"
        signature: "0xd2215b9307c272eb12ea42c18768b9e133ed5b674abc23c577f5096520e433c807930497ed3f90498a7c82bbc1a730f20201413b10a30cd8737403fdbb63bf874966ca205f25e790a8860fbc152a9775e430b9618cd6282d2a0d29969412de07"

    get-outputs-by-id-response-example:
      value:
        type: 3
        amount: "1000"
        unlockConditions:
          - type: 0
            address:
              type: 0
              pubKeyHash: "0x8eaf87ac1f52eb05f2c7c0c15502df990a228838dc37bd18de9503d69afd257d"

    get-output-metadata-by-id-response-unspent-example:
      value:
        blockId: "0xd3a0a0c76ab2d9b406a32c30c43e102fe0f39a12a3f6c1e3b19d239db2f18d75"
        transactionId: "0x1c52e8e630d1c6e45ab6f46c63d8d6cb02e6c2ed6e31b6c97d6f5c5f5a5d5c5b"
        outputIndex: 3
        isSpent: false
        includedCommitmentId: "0x7c62d9b9ed3c1f3ef942a7ea17ec1270d77c109f0ba57b6c2d2b9e9fb3e69a3a"
        latestCommitmentId: "0x7c62d9b9ed3c1f3ef942a7ea17ec1270d77c109f0ba57b6c2d2b9e9fb3e69a3a"

    get-output-metadata-by-id-response-spent-example:
      value:
        blockId: "0xd3a0a0c76ab2d9b406a32c30c43e102fe0f39a12a3f6c1e3b19d239db2f18d75"
        transactionId: "0x1c52e8e630d1c6e45ab6f46c63d8d6cb02e6c2ed6e31b6c97d6f5c5f5a5d5c5b"
        outputIndex: 3
        isSpent: true
        commitmentIdSpent: "0x4b91c935926c77d0ac9b4a569c3eb3b0f0c9918f2d4f4d9bb1c7dfc19b41e4c2"
        transactionIdSpent: "0x1ee46e19f4219ee65afc10227d0ca22753f76ef32d1e922e5cbe3fbc9b5a5298"
        includedCommitmentId: "0x7c62d9b9ed3c1f3ef942a7ea17ec1270d77c109f0ba57b6c2d2b9e9fb3e69a3a"
        latestCommitmentId: "0x7c62d9b9ed3c1f3ef942a7ea17ec1270d77c109f0ba57b6c2d2b9e9fb3e69a3a"

    get-commitment-response-example:
      value:
        index: 986
        prevId: "0x8fb6cbb1ecf02c6b5a6a5a6a5f6c5a6a5f6c5a6a5a6a5a6a5f6c5a6a5a6a5f6c50000000000000000"
        rootsId: "0xa4dd36465af63d495d35a05f592d42a51511c153e1bae8fad00453c8cbb48727"
        cumulativeWeight: 78901

    get-commitment-response-binary-example:
      value: "070000000a1a0000977c626276b19ef8b3c445709f2f0f2ccc4abb98d97617f421f240c0d1ee066d4306e67a0321889ef8ec89b7eff1378049e058f0fa87a78c2452ae72631a5a99d913d1cbb3525b8faa1800e28dfcb28154bcba10154c39ef87ceda793cb44f58ae1549c88ea13fe4a9695bb6f0aba6cb756522209e5066a96039ae12b398b975693bdc21e222997c86ff9bfc5844f0372d58ff6fa510688e53c181bbdf4db41f9b627540a70e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a80000000300d85e5b1590d898d1e0cdebb2e3b5337c8b76270142663d78811683ba47c17c989ad7a8f0ff2c6438bf435786d4a5b0125a5caf7367061b49a739389d5ebea234c0466c86f88a3f8add03bff04c2e34b214683f2f6983641e1d1185da7e2c3e0200d9922819a39e94ddf3907f4b9c8df93f39f026244fcb609205b9a879022599f218be2536d8b7b8547faa3dbdfe98339ebe9e2b2417a8a03eee02b2a8312b9e026dd0a33261a58a240cd0a1b06cdf1775d98d316f162d3eec402f4bf08bea2a0700f9d9656a60049083eef61487632187b351294c1fa23d118060d813db6d03e8b6ca8180d435708e826bc2042ccd667babb59c5cc461ff29dba966359fcd6fc511cdfdf10d6576f36ac2a6e5cb691e13968c13947ffbd9239939d3802b2fbe0f06"

    get-utxo-changes-response-example:
      value:
        index: 789
        createdOutputs:
          - "0x1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2"
          - "0x3b4c5d6e7f8a9b0c1d2e3f4a5b6c7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4"
        consumedOutputs:
          - "0x5c6d7e8f9a0b1c2d3e4f5a6b7c8d9e0f1a2b3c4d5e6f7a8b9c0d1e2f3a4b5c6"
          - "0x7d8e9f0a1b2c3d4e5f6a7b8c9d0e1f2a3b4c5d6e7f8a9b0c1d2e3f4a5b6c7"

    get-peers-response-example:
      value:
        - id: 12D3KooWMajsSUxSUFb3CRgmJvygYCGd27uMDdppVYNGud7xuKG5
          multiAddresses:
            - "/dns/abc.com/tcp/15602"
          alias: abc
          relation: known
          connected: true
          gossip:
            heartbeat:
              latestCommittedSlotIndex: 61527
              prunedSlotIndex: 61200
              latestConfirmedSlotIndex: 61527
              connectedNeighbors: 5
              syncedNeighbors: 7
            metrics:
              newBlocks: 3799
              knownBlocks: 554
              receivedBlocks: 4370
              receivedBlockRequests: 0
              receivedHeartbeats: 1
              sentBlocks: 6
              sentBlockRequests: 4325
              sentHeartbeats: 9
              droppedPackets: 0
        - id: 12D3KooWNYDcJqxnWqCLSgeQKqNStwFUqHSJXPdSYTJnfxQESzie
          multiAddresses:
            - "/dns/xyz.com/tcp/15600"
          alias: xyz
          relation: known
          connected: true
          gossip:
            heartbeat:
              latestCommittedSlotIndex: 61527
              prunedSlotIndex: 56508
              latestConfirmedSlotIndex: 61527
              connectedNeighbors: 5
              syncedNeighbors: 6
            metrics:
              newBlocks: 510
              knownBlocks: 79
              receivedBlocks: 589
              receivedBlockRequests: 0
              receivedHeartbeats: 1
              sentBlocks: 42
              sentBlockRequests: 576
              sentHeartbeats: 9
              droppedPackets: 0

    get-peer-response-example:
      value:
        id: 12D3KooWMajsSUxSUFb3CRgmJvygYCGd27uMDdppVYNGud7xuKG5
        multiAddresses:
          - "/dns/abc.com/tcp/15602"
        alias: abc
        relation: known
        connected: true
        gossip:
          heartbeat:
            latestCommittedSlotIndex: 61527
            prunedSlotIndex: 61200
            latestConfirmedSlotIndex: 61527
            connectedNeighbors: 5
            syncedNeighbors: 7
          metrics:
            newBlocks: 3799
            knownBlocks: 554
            receivedBlocks: 4370
            receivedBlockRequests: 0
            receivedHeartbeats: 1
            sentBlocks: 6
            sentBlockRequests: 4325
            sentHeartbeats: 9
            droppedPackets: 0

    post-peer-request-example:
      value:
        multiAddress: >-
          /dns/abc.com/tcp/15602/p2p/12D3KooWMajsSUxSUFb3CRgmJvygYCGd27uMDdppVYNGud7xuKG5
        alias: abc.com

    post-peer-response-example:
      value:
        id: 12D3KooWMajsSUxSUFb3CRgmJvygYCGd27uMDdppVYNGud7xuKG5
        multiAddresses:
          - "/dns/abc.com/tcp/15602"
        alias: abc
        relation: known
        connected: true
        gossip:
          heartbeat:
            latestCommittedSlotIndex: 61527
            prunedSlotIndex: 61200
            latestConfirmedSlotIndex: 61527
            connectedNeighbors: 5
            syncedNeighbors: 7
          metrics:
            newBlocks: 3799
            knownBlocks: 554
            receivedBlocks: 4370
            receivedBlockRequests: 0
            receivedHeartbeats: 1
            sentBlocks: 6
            sentBlockRequests: 4325
            sentHeartbeats: 9
            droppedPackets: 0

    database-prune-request-example:
      value:
        targetDatabaseSize: 21474836480

    database-prune-response-example:
      value:
        index: 1560

    create-full-snapshot-request-example:
      value:
        fullIndex: 1560

    create-full-snapshot-response-example:
      value:
        fullIndex: 1560
        fullFilePath: "snapshots/mainnet/full_snapshot_1560.bin"

    create-delta-snapshot-request-example:
      value:
        deltaIndex: 1000

    create-delta-snapshot-response-example:
      value:
        deltaIndex: 1000
        deltaFilePath: "snapshots/mainnet/delta_snapshot_1000.bin"

  schemas:

    Block:
      description: A block is the object nodes gossip around in the network. It always references other blocks that are known as parents. It is stored as a vertex on the tangle data structure that the nodes maintain. A block can have a maximum size of 32Kb.
      properties:
        protocolVersion:
          type: number
          description: Protocol version identifier. It also tells which protocol rules apply to the block.
        networkId:
          type: number
          description: Network version identifier. It also tells which network the node is running.
        strongParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        weakParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        shallowLikeParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        accountId:
          type: string
          description: The identifier of the account of this block.
        issuerPublicKey:
          type: string
          description: The public key of the issuer.
        issuingTime:
          type: integer
          description: The timestamp of issuing this block.
        burnedMana:
          type: integer
          description: uint64, The mana burned in this block.
        commitment:
          $ref: '#/components/schemas/Commitment'
          description: The slot commitment contains in this block.
        latestFinalizedSlot:
          type: integer
          description: The latest confirmed slot index of the node when issuing this block.
        payload:
          description: The inner payload of the block. Can be nil.
          oneOf:
            - $ref: '#/components/schemas/TransactionPayload'
            - $ref: '#/components/schemas/TaggedDataPayload'
        signature:
          type: string
          description: The signature of entire block, signed by the issuer.
      required:
        - protocolVersion
        - strongParents
        - nonce

    TransactionPayload:
      description: The Transaction Payload to be embedded into a block.
      properties:
        type:
          type: integer
          description: Set to value 6 to denote a Transaction Payload.
        essence:
          type: object
          oneOf:
            - $ref: '#/components/schemas/TransactionEssence'
        unlocks:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/SignatureUnlock'
              - $ref: '#/components/schemas/ReferenceUnlock'
              - $ref: '#/components/schemas/AliasUnlock'
              - $ref: '#/components/schemas/NFTUnlock'
      required:
        - type
        - essence
        - unlocks

    TransactionEssence:
      description: Describes the essence data making up a transaction by defining its inputs and outputs and an optional payload.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Transaction Essence.
        networkId:
          type: string
          description: Network identifier. Plain string encoded number. This field signals for which network the block is meant for. It is computed out of the first 8 bytes of the `BLAKE2b-256` hash of the concatenation of the network name and protocol version string.
        creationTime:
          type: integer
          description: The timestamp of this transaction is created.
        inputsCommitment:
          type: string
          description: BLAKE2b-256 hash of the BLAKE2b-256 hashes of the serialized outputs referenced in Inputs by their outputIds (transactionId || outputIndex). Hex-encoded data with 0x prefix.
        inputs:
          type: array
          description: The inputs of this transaction.
          items:
            oneOf:
              - $ref: '#/components/schemas/UTXOInput'
        outputs:
          type: array
          description: The outputs of this transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/BasicOutput'
              - $ref: '#/components/schemas/AliasOutput'
              - $ref: '#/components/schemas/FoundryOutput'
              - $ref: '#/components/schemas/NFTOutput'
        payload:
          description: The optional embedded payload.
          oneOf:
            - $ref: '#/components/schemas/TaggedDataPayload'
      required:
        - type
        - networkId
        - inputsCommitment
        - inputs
        - outputs

    UTXOInput:
      description: Describes an input which references an unspent transaction output to consume.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an UTXO Input.
        transactionId:
          type: string
          description: The BLAKE2b-256 hash of the transaction from which the UTXO comes from. Hex-encoded data with 0x prefix.
        transactionOutputIndex:
          type: integer
          description: The index of the output on the referenced transaction to consume.
      required:
        - type
        - transactionId
        - transactionOutputIndex

    BasicOutput:
      description: Describes a basic output with optional features.
      properties:
        type:
          type: integer
          description: Set to value 3 to denote a Basic Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this BasicOutput output. Plain string encoded number.
        nativeTokens:
          type: array
          description: Native tokens held by the otuput.
          items:
            anyOf:
              - $ref: '#/components/schemas/NativeToken'
        unlockConditions:
          type: array
          description: Unlock condtions that define how the output an be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/AddressUnlockCondition'
              - $ref: '#/components/schemas/StorageDepositReturnUnlockCondition'
              - $ref: '#/components/schemas/TimelockUnlockCondition'
              - $ref: '#/components/schemas/ExpirationUnlockCondition'
      required:
        - type
        - amount
        - unlockConditions

    AliasOutput:
      description: Describes an alias account in the ledger that can be controlled by the state and governance controllers.
      properties:
        type:
          type: integer
          description: Set to value 4 to denote an Alias Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this output. Plain string encoded number.
        nativeTokens:
          type: array
          description: Native tokens held by the otuput.
          items:
            anyOf:
              - $ref: '#/components/schemas/NativeToken'
        aliasId:
          type: string
          description: Unique identifier of the alias, which is the BLAKE2b-256 hash of the Output ID that created it.
            Alias Address = Alias Address Type || Alias ID. Hex-encoded data with 0x prefix.
        stateIndex:
          type: integer
          description: A counter that must increase by 1 every time the alias is state transitioned.
        stateMetadata:
          type: string
          description: Hex-encoded metadata with 0x prefix that can only be changed by the state controller.
        foundryCounter:
          type: integer
          description: A counter that denotes the number of foundries created by this alias account.
        unlockConditions:
          type: array
          description: Unlock condtions that define how the output an be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/StateControllerAddressUnlockCondition'
              - $ref: '#/components/schemas/GovernorAddressUnlockCondition'
        features:
          type: array
          description: Features that add utility to the output but do not impose unlocking conditions.
          items:
            anyOf:
              - $ref: '#/components/schemas/SenderFeature'
              - $ref: '#/components/schemas/MetadataFeature'
        immutableFeatures:
          type: array
          description: Immutable features that add utility to the output but do not impose unlocking conditions.
            These features need to be kept in future transitions of the UTXO state machine.
          items:
            anyOf:
              - $ref: '#/components/schemas/IssuerFeature'
              - $ref: '#/components/schemas/MetadataFeature'
      required:
        - type
        - amount
        - aliasId
        - stateIndex
        - foundryCounter
        - unlockConditions

    FoundryOutput:
      description: Describes a foundry output that is controlled by an alias.
      properties:
        type:
          type: integer
          description: Set to value5 to denote a Foundry Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this output. Plain string encoded number.
        nativeTokens:
          type: array
          description: Native tokens held by the otuput.
          items:
            anyOf:
              - $ref: '#/components/schemas/NativeToken'
        serialNumber:
          type: integer
          description: The serial number of the foundry with respect to the controlling alias.
        tokenScheme:
          type: array
          description: Defines the supply control scheme of the tokens controlled by the foundry.
          items:
            oneOf:
              - $ref: '#/components/schemas/SimpleTokenScheme'
        unlockConditions:
          type: array
          description: Unlock condtions that define how the output an be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/ImmutableAliasAddressUnlockCondition'
        features:
          type: array
          description: Features that add utility to the output but do not impose unlocking conditions.
          items:
            anyOf:
              - $ref: '#/components/schemas/MetadataFeature'
        immutableFeatures:
          type: array
          description: Immutable features that add utility to the output but do not impose unlocking conditions.
            These features need to be kept in future transitions of the UTXO state machine.
          items:
            anyOf:
              - $ref: '#/components/schemas/MetadataFeature'
      required:
        - type
        - amount
        - serialNumber
        - tokenScheme
        - unlockConditions

    NFTOutput:
      description: escribes an NFT output, a globally unique token with metadata attached.
      properties:
        type:
          type: integer
          description: Set to value 6 to denote a NFT Output.
        amount:
          type: string
          description: The amount of IOTA tokens to deposit with this output. Plain string encoded number.
        nativeTokens:
          type: array
          description: Native tokens held by the otuput.
          items:
            anyOf:
              - $ref: '#/components/schemas/NativeToken'
        nftId:
          type: string
          description: Unique identifier of the NFT, which is the BLAKE2b-256 hash of the Output ID that created it. NFT Address = NFT Address Type || NFT ID. Hex-encoded data with 0x prefix.
        unlockConditions:
          type: array
          description: Unlock condtions that define how the output an be unlocked in a transaction.
          items:
            anyOf:
              - $ref: '#/components/schemas/AddressUnlockCondition'
              - $ref: '#/components/schemas/StorageDepositReturnUnlockCondition'
              - $ref: '#/components/schemas/TimelockUnlockCondition'
              - $ref: '#/components/schemas/ExpirationUnlockCondition'
        features:
          type: array
          description: Features that add utility to the output but do not impose unlocking conditions.
          items:
            anyOf:
              - $ref: '#/components/schemas/SenderFeature'
              - $ref: '#/components/schemas/IssuerFeature'
              - $ref: '#/components/schemas/MetadataFeature'
              - $ref: '#/components/schemas/TagFeature'
        immutableFeatures:
          type: array
          description: Immutable features that add utility to the output but do not impose unlocking conditions.
            These features need to be kept in future transitions of the UTXO state machine.
          items:
            anyOf:
              - $ref: '#/components/schemas/IssuerFeature'
              - $ref: '#/components/schemas/MetadataFeature'
      required:
        - type
        - amount
        - nftId
        - unlockConditions

    NativeToken:
      description: A native token and its balance in the output.
      properties:
        tokenId:
          type: string
          description: Hex-encoded identifier with 0x prefix of the native token. Same as foundryId of the controlling foundry.
        amount:
          type: string
          description: Amount of native tokens (up to uint256). Hex-encoded number with 0x prefix.
      required:
        - tokenId
        - amount

    Ed25519Address:
      description: The Ed25519 address.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an Ed25519 Address.
        pubKeyHash:
          type: string
          description: The hex-encoded, 0x prefixed BLAKE2b-256 hash of the Ed25519 public key
      required:
        - type
        - pubKeyHash

    AliasAddress:
      description: Address of an alias account.
      properties:
        type:
          type: integer
          description: Set to value 8 to denote an Alias Address.
        aliasId:
          type: string
          description: The hex-encoded, 0x prefixed BLAKE2b-256 hash of the outputId that created the alias.
      required:
        - type
        - aliasId

    NFTAddress:
      description: Address of an NFT account.
      properties:
        type:
          type: integer
          description: Set to value 16 to denote an NFT Address.
        nftId:
          type: string
          description: The hex-encoded, 0x prefixed BLAKE2b-256 hash of the outputId that created the NFT.
      required:
        - type
        - nftId

    AddressUnlockCondition:
      description: Can be unlocked by unlocking the address.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an Address Unlock Condition.
        address:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AliasAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - address

    ImmutableAliasAddressUnlockCondition:
      description: Can be unlocked by unlocking the permanent alias address.
        The unlock condition has to be kept in future state transitions of the UTXO state machine.
      properties:
        type:
          type: integer
          description: Set to value 6 to denote an Immutable Alias Address Unlock Condition.
        address:
          oneOf:
            - $ref: '#/components/schemas/AliasAddress'
      required:
        - type
        - address

    StorageDepositReturnUnlockCondition:
      description: Can be unlocked by depositing return amount to return address via an output that only has Address Unlock Condition.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Storage Deposit Return Unlock Condition.
        returnAddress:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AliasAddress'
            - $ref: '#/components/schemas/NFTAddress'
        returnAmount:
          type: string
          description: Amount of IOTA tokens the consuming transaction should deposit to the address defined in Return Address. Plain string encoded number.
      required:
        - type
        - returnAddress
        - returnAmount

    TimelockUnlockCondition:
      description: Can be unlocked if the CTT has a >= Unix Timestamp.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote an Timelock Unlock Condition.
        unixTime:
          type: integer
          description: Unix time (seconds since Unix epoch) starting from which the output can be consumed.
          minimum: 0
          exclusiveMinimum: true
      required:
        - type
        - unixTime

    ExpirationUnlockCondition:
      description: Defines a unix time until which only Address, defined in Address Unlock Condition, is allowed to unlock the output. After the unix time, only Return Address can unlock it.
      properties:
        type:
          type: integer
          description: Set to value 3 to denote an Expiration Unlock Condition.
        returnAddress:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AliasAddress'
            - $ref: '#/components/schemas/NFTAddress'
        unixTime:
          type: integer
          description: Before this unix time, Address Unlock Condition is allowed to unlock the output, after that only the address defined in Return Address.
          minimum: 0
          exclusiveMinimum: true
      required:
        - type
        - returnAddress
        - unixTime

    StateControllerAddressUnlockCondition:
      description: Can be unlocked by unlocking the address.
      properties:
        type:
          type: integer
          description: Set to value 4 to denote an  Sate Controller Address Unlock Condition.
        address:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AliasAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - address

    GovernorAddressUnlockCondition:
      description: Can be unlocked by unlocking the address.
      properties:
        type:
          type: integer
          description: Set to value 5 to denote an  Governor Address Unlock Condition.
        address:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AliasAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - address

    SenderFeature:
      description: Identifies the validated sender of the output.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote a Sender Feature.
        sender:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AliasAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - sender

    IssuerFeature:
      description: Identifies the validated issuer of the UTXO state machine (alias/NFT).
      properties:
        type:
          type: integer
          description: Set to value 1 to denote an Issuer Feature.
        issuer:
          oneOf:
            - $ref: '#/components/schemas/Ed25519Address'
            - $ref: '#/components/schemas/AliasAddress'
            - $ref: '#/components/schemas/NFTAddress'
      required:
        - type
        - issuer

    MetadataFeature:
      description: Defines metadata (arbitrary binary data) that will be stored in the output.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote a Metadata Feature.
        data:
          type: string
          description: Hex-encoded binary data with 0x prefix.
      required:
        - type
        - data

    TagFeature:
      description: Defines an indexation tag to which the output can be indexed by additional node plugins.
      properties:
        type:
          type: integer
          description: Set to value 3 to denote a Tag Feature.
        tag:
          type: string
          description: Hex-encoded binary indexation tag with 0x prefix.
      required:
        - type
        - tag

    SimpleTokenScheme:
      description: Defines the simple supply control scheme of native tokens. Tokens can be minted by the foundry without additional restrictions as long as maximum supply is requested and circulating supply is not negative.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an Simple Token Scheme.
        mintedTokens:
          type: string
          description: Minted tokens controlled by this foundry. Hex-encoded number with 0x prefix.
        meltedTokens:
          type: string
          description: Melted tokens controlled by this foundry. Hex-encoded number with 0x prefix.
        maxSupply:
          type: string
          description: Maximum supply of tokens controlled by this foundry. Hex-encoded number with 0x prefix.
      required:
        - type
        - mintedTokens
        - meltedTokens
        - maxSupply

    SignatureUnlock:
      description: Defines an unlock containing signature(s) unlocking input(s).
      properties:
        type:
          type: integer
          description: Denotes a Signature Unlock.
        signature:
          type: object
          oneOf:
            - $ref: '#/components/schemas/Ed25519Signature'
      required:
        - type
        - signature

    Ed25519Signature:
      description: The Ed25519 signature.
      properties:
        type:
          type: integer
          description: Set to value 0 to denote an Ed25519 Signature.
        publicKey:
          type: string
          description: The public key of the Ed25519 keypair which is used to verify the signature. Hex-encoded with 0x prefix.
        signature:
          type: string
          description: The signature signing the serialized Transaction Essence. Hex-encoded with 0x prefix.
      required:
        - type
        - publicKey
        - signature

    ReferenceUnlock:
      description: References a previous unlock in order to substitute the duplication of the same unlock data for inputs which unlock through the same data.
      properties:
        type:
          type: integer
          description: Set to value 1 to denote a Reference Unlock.
        reference:
          type: integer
          description: Represents the index of a previous unlock.
      required:
        - type
        - reference

    AliasUnlock:
      description: References a previous unlock that unlocks an Alias Output.
      properties:
        type:
          type: integer
          description: Set to value 2 to denote an Alias Unlock.
        reference:
          type: integer
          description: Represents the index of a previous unlock.
      required:
        - type
        - reference

    NFTUnlock:
      description: References a previous unlock that unlocks an NFT Output.
      properties:
        type:
          type: integer
          description: Set to value 3 to denote an NFT Unlock.
        reference:
          type: integer
          description: Represents the index of a previous unlock.
      required:
        - type
        - reference

    TaggedDataPayload:
      description: The Tagged Data Payload to be embedded into a block.
      properties:
        type:
          type: integer
          description: Set to value 5 to denote a Tagged Data Payload.
        tag:
          type: string
          description: The tag to allow external tools to find/look up this block. It has a size between 0 and 64 bytes and must be encoded as a hex-string with 0x prefix. Network nodes do not index blocks with Tagged Data Payload by the tag field by default.
        data:
          type: string
          description: The optional data to attach. This may have a length of 0. Hex-encoded with 0x prefix.
      required:
        - type

    Peer:
      description: The peer of a node.
      properties:
        id:
          type: string
          description: The identifier of the peer.
        multiAddresses:
          type: array
          items:
            type: string
          description: The addresses of the peer.
        alias:
          type: string
          description: The alias of the peer.
        relation:
          type: string
          enum:
            - known
            - unknown
            - autopeered
        connected:
          type: boolean
          description: Tells whether the peer is connected or not.
        gossip:
          allOf:
            - $ref: '#/components/schemas/Gossip'
      required:
        - id
        - multiAddresses
        - relation
        - connected

    Gossip:
      description: Information about the gossip stream with the peer.
      properties:
        heartbeat:
          description: Information about the most recent heartbeat of the peer. The heartbeat is `null` if none has been received yet.
          allOf:
            - $ref: '#/components/schemas/Heartbeat'
          nullable: true
        metrics:
          description: Metrics about the gossip stream with the peer.
          allOf:
            - $ref: '#/components/schemas/Metrics'
      required:
        - heartbeat
        - metrics

    Heartbeat:
      properties:
        latestCommittedSlotIndex:
          type: integer
          description: The most recent slot that has been committed by the node.
        prunedSlotIndex:
          type: integer
          description: Tells from which starting point the node holds data.
        latestConfirmedSlotIndex:
          type: integer
          description: The most recent confirmed slot known to the node.
        connectedNeighbors:
          type: integer
          description: Tells how many connected peers the node has.
        syncedNeighbors:
          type: integer
          description: Tells how many synced peers the node has.
      required:
        - latestCommittedSlotIndex
        - prunedSlotIndex
        - latestConfirmedSlotIndex
        - connectedNeighbors
        - syncedNeighbors

    Metrics:
      properties:
        newBlocks:
          type: integer
          description: The number of received blocks that were new for the node.
        knownBlocks:
          type: integer
          description: The number of received blocks that already were known to the node.
        receivedBlocks:
          type: integer
          description: The number of received blocks from the peer.
        receivedBlockRequests:
          type: integer
          description: The number of received block requests from the peer.
        receivedHeartbeats:
          type: integer
          description: The number of received heartbeats from the peer.
        sentBlocks:
          type: integer
          description: The number of sent blocks to the peer.
        sentBlockRequests:
          type: integer
          description: The number of sent block requests to the peer.
        sentHeartbeats:
          type: integer
          description: The number of sent heartbeats to the peer.
        droppedPackets:
          type: integer
          description: The number of dropped packets.
      required:
        - newBlocks
        - knownBlocks
        - receivedBlocks
        - receivedBlockRequests
        - receivedHeartbeats
        - sentBlocks
        - sentBlockRequests
        - sentHeartbeats
        - droppedPackets

    ErrorResponse:
      description: The error format.
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: The application error code.
            message:
              type: string
              description: The error reason.
          required:
            - code
            - message
      required:
        - error

    ForbiddenResponse:
      description: Indicates that this endpoint is not available for public use.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 403
          message: not available for public use

    ServiceUnavailableResponse:
      description: Indicates that the service is unavailable.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 503
          message: service unavailable

    BadRequestResponse:
      description: Indicates that the request was bad.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 400
          message: invalid data provided

    NotFoundResponse:
      description: Indicates that the data was not found.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 404
          message: could not find data

    InternalErrorResponse:
      description: Indicates that the server encountered an unexpected condition, which prevented it from fulfilling the request by the client.
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
      example:
        error:
          code: 500
          message: internal server error

    RoutesResponse:
      description: Contains the available API routes of the node.
      properties:
        routes:
          type: array
          items:
            type: string
      required:
        - routes

    InfoResponse:
      description: Returns general information about the node.
      properties:
        name:
          type: string
          description: The name of the node.
        version:
          type: string
          description: The semantic version of the node.
        accountId:
          type: string
          description: The account identifier of the node.        
        status:
          description: Status of the node.
          properties:
            isHealthy:
              type: boolean
              description: Tells whether the node is healthy or not.
            lastAcceptedBlockId:
              description: The identifier of the latest accepted block.
              type: string
            lastConfirmedBlockId:
              description: The identifier of the latest confirmed block.
              type: string
            finalizedSlot:
              description: The index of latest confirmed slot.
              type: integer
            ATT:
              description: A notion of time that is anchored to the latest accepted block.
              type: integer
            RATT:
              description: The ATT after it has advanced with the system clock.
              type: integer
            CTT:
              description: A notion of time that is anchored to the latest confirmed block.
              type: integer
            RCTT:
              description: The CTT after it has advanced with the system clock.
              type: integer
            latestCommittedSlot:
              type: object
              description: The latest slot that the node has committed to.
            pruningSlot:
              type: integer
              description: The index of the slot before which the tangle history is pruned.
          required:
            - isHealthy
            - latestCommittedSlot
            - finalizedSlot
            - pruningSlot
        metrics:
          description: Node metrics.
          properties:
            blocksPerSecond:
              description: The current rate of new blocks per second.
              type: number
              format: float
            confirmedBlocksPerSecond:
              description: The current rate of confirmed blocks per second.
              type: number
              format: float
            confirmedRate:
              description: The ratio of confirmed blocks in relation to new blocks of the last confirmed slot.
              type: number
              format: float
          required:
            - blocksPerSecond
            - confirmedBlocksPerSecond
            - confirmedRate
        supportedProtocolVersions:
          type: array
          description: The supported protocol versions.
          items:
            type: integer
        protocol:
          description: Protocol parameters.
          properties:
            networkName:
              type: string
              description: The Name of the network from which the networkId is derived.
            bech32Hrp:
              type: string
              description: Tells whether the node supports mainnet or testnet addresses. Value `iota` indicates that the node supports mainnet addresses. Value `atoi` indicates that the node supports testnet addresses.
            tokenSupply:
              type: string
              description: Current supply of base token. Plain string encoded number.
            version:
              type: integer
              description: Protocol version used by the network.
            minPowScore:
              description: The Proof-of-Work difficulty for a block to be sent over the network to mitigate spam.
              type: number
              format: float
            rentStructure:
              description: The rent structure according to TIP-19.
              properties:
                vByteCost:
                  description: Defines the rent of a single virtual byte denoted in IOTA tokens.
                  type: integer
                vByteFactorData:
                  description: Defines the factor to be used for data only fields.
                  type: integer
                vByteFactoKey:
                  description: Defines the factor to be used for key/lookup generating fields.
                  type: integer
              required:
                - vByteCost
                - vByteFactorData
                - vByteFactoKey
            genesisUnixTimestamp:
              type: integer
              description: The genesis slot index.
            slotDurationInSeconds:
              type: integer
              description: The duration of a slot, in seconds.
          required:
            - networkName
            - bech32Hrp
            - tokenSupply
            - protocolVersion
            - minPowScore
            - rentStructure
            - version
            - genesisSlotIndex
            - slotDurationInSeconds
        baseToken:
          description: Gives info about the base token the network uses.
          properties:
            name:
              type: string
              description: The name of the base token of the network.
            tickerSymbol:
              type: string
              description: Ticker symbol of the token to be displayed on trading platforms.
            unit:
              type: string
              description: The primary unit of the token.
            decimals:
              type: integer
              description: Number of decimals the primary unit is divisible up to.
            subunit:
              type: string
              description: The name of the smallest possible denomination of the primary unit. subunit * 10^decimals = unit
            useMetricPrefix:
              type: boolean
              description: Whether to use metric prefixes for displaying unit.
          required:
            - name
            - tickerSymbol
            - unit
            - decimals
            - useMetricPrefix
        features:
          description: The features that are supported by the node. For example, a node could support the feature, which would allow the BIC to be included by the node account. All features must be lowercase.
          type: array
          items:
            type: string
      required:
        - name
        - version
        - status
        - metrics
        - supportedProtocolVersions
        - protocol
        - baseToken
        - features

    AccountStakingResponse:
      description: Returns the stored and potential mana of the account.
      properties:
        potentialMana:
          type: integer
        storedMana:
          type: integer

    AccountManaResponse:
      description: Returns the stored and potential mana of the account.
      properties:
        potentialMana:
          type: integer
        storedMana:
          type: integer

    AccountResponse:
      description: Returns information that are ideal for attaching a block.
      properties:
        accountStatus:
          type: string
          enum:
            - active
            - inactive
            - nonBlockIssuer
            - locked
          description: Only 'active' account is allowed to issue blocks. To account to be active, the block issuer feature must be provided and the Block Issuance Credits (BIC) balances of an account should be non-negative. If the block issuer feature is not present, 'nonBlockIssuer' is returned. If the conditions are not met, it's 'inactive'. If the BIC balances is negative, the account is 'locked'.
        slotIndex: 
          type: integer
        blockIssuerKeys:
          type: array
          items:
            type: string
        bic:
          type: integer

    IssuanceBlockHeaderResponse:
      description: Returns information that are ideal for attaching a block.
      properties:
        strongParents:
          type: array
          items:
            type: string
          description: The block identifiers that can be used to a attach a block to. Hex-encoded with 0x prefix.
        weakParents:
          type: array
          items:
            type: string
          description: The block identifiers that can be used to a attach a block to. Hex-encoded with 0x prefix.
        shallowLikeParents:
          type: array
          items:
            type: string
          description: The block identifiers that can be used to a attach a block to. Hex-encoded with 0x prefix.
        latestFinalizedSlot:
          type: integer
          description: The latest finalized slot index.
        commitment:
          $ref: '#/components/schemas/Commitment'

    CongestionResponse:
      description: Provides the cost and readiness to issue estimates.
      properties:
        slot-index:
          type: integer
          description: The slot index for which the congestion estimate is provided.
        ready:
          type: integer
          description: >
            Provided only if account specified in the request. Indicates if a node is ready to issue a block in a current congestion or should wait.
            Values:
              * `0`: ready to issue a block.
              * `1`: need to wait.
        cost:
          type: integer
          description: The cost in mana for issuing a block in a current congestion estimated based on RMC and slot index.
      required:
        - slot-index
        - cost


    Commitment:
      description: An object embedded to a block.
      properties:
        index:
          type: integer
          description: The slot index of the commitment.
        prevId:
          type: string
          description: The commitment identifier of the previous slot.
        rootsId:
          type: string
          description: The digest of multiple merkle roots within this slot.
        cumulativeWeight:
          type: integer
          description: 
            The sum of previous slot commitment cumulative weight and 
            weight of issuers of accepted blocks within this slot. 
            It is just an indication of "committed into" this slot,
            and can not strictly be used for evaluating the switching of a chain.

    SubmitBlockRequest:
      description: Submits a block to the node.
      properties:
        protocolVersion:
          type: number
          description: Protocol version identifier. It also tells which protocol rules apply to the block.
        networkId:
          type: number
          description: Network version identifier. It also tells which network the node is running.
        strongParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        weakParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        shallowLikeParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        accountId:
          type: string
          description: The identifier of the issuer of this block.
        issuerPublicKey:
          type: string
          description: The public key of the issuer.
        issuingTime:
          type: integer
          description: The timestamp of issuing this block.
        commitment:
          $ref: '#/components/schemas/Commitment'
          description: The slot commitment contains in this block.
        latestFinalizedSlot:
          type: integer
          description: The latest finalized slot index of the node when issuing this block.
        payload:
          description: The inner payload of the block. Can be nil.
          oneOf:
            - $ref: '#/components/schemas/TransactionPayload'
            - $ref: '#/components/schemas/TaggedDataPayload'
        nonce:
          type: string
          description: The nonce which lets this block fulfill the Proof-of-Work requirement. Plain string encoded number.
        signature:
          type: string
          description: The signature of entire block, signed by the issuer.
      required:
        - protocolVersion

    SubmitBlockResponse:
      description: Returns the block identifier of the submitted block.
      properties:
        blockId:
          type: string
          description: The block identifier of the submitted block. Hex-encoded with 0x prefix.
      required:
        - blockId

    BlockMetadataResponse:
      description: Returns the metadata of a given block.
      properties:
        blockId:
          type: string
          description: The identifier of the block. Hex-encoded with 0x prefix.
        strongParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        weakParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        shallowLikeParents:
          type: array
          description: The identifiers of the blocks this block references. Hex-encoded data with 0x prefix.
          items:
            type: string
        blockState:
          type: string
          enum:
            - pending
            - confirmed
            - finalized
          description: If `pending`, the block is stored but not confirmed. If `confirmed`, the block is confirmed with the first level of knowledge. If `finalized`, the block is included and cannot be reverted anymore.
        txState:
          type: string
          enum:
            - pending
            - confirmed
            - finalized
          description: If 'pending', the block contains not yet included transaction. If 'confirmed' means transaction is confirmed with the first level of knowledge. If 'finalized' means transaction is included and cannot be reverted anymore.
        blockStateReason:
          type: integer
          enum: [1,2,3]
          description: >
            Values:
              * `1` - denotes that the block is invalid.
              * `2` - denotes that the block is orphaned due to congestion control.
              * `3` - denotes that the block is orphaned due to negative mana balance.
              * Note: more reasons will be added.
        txStateReason:
          type: integer
          enum: [1,2,3,4,5,6,7,8,9,10,11,12,255]
          description: >
            Values:
              * `1` - denotes that the referenced UTXO was already spent.
              * `2` - denotes that the transaction is conflicting with another transaction.
              * `3` - denotes that the referenced UTXO cannot be found.
              * `4` - denotes that the sum of the inputs and output values does not match.
              * `5` - denotes that the unlock block signature is invalid.
              * `6` - denotes that the configured timelock is not yet expired.
              * `7` - denotes that the given native tokens are invalid.
              * `8` - denotes that the return amount in a transaction is not fulfilled by the output side.
              * `9` - denotes that the input unlock is invalid.
              * `10` - denotes that the inputs commitment is invalid.
              * `11` - denotes that an output contains a Sender with an ident (address) which is not unlocked.
              * `12` - denotes that the chain state transition is invalid.
              * `255` - denotes that the semantic validation failed.
        reissuePayload:
          type: boolean
          description: Tells if the payload should be issued again.
      required:
        - blockId
        - strongParents

    BlockResponse:
      description: Returns a given block.
      properties:
        allOf:
          $ref: '#/components/schemas/Block'

    OutputResponse:
      description: Returns an output and its metadata.
      anyOf:
        - $ref: '#/components/schemas/BasicOutput'
        - $ref: '#/components/schemas/AliasOutput'
        - $ref: '#/components/schemas/FoundryOutput'
        - $ref: '#/components/schemas/NFTOutput'

    OutputMetadataResponse:
      description: Returns metadata about an output.
      properties:
        blockId:
          type: string
          description: The block identifier that references the output. Hex-encoded with 0x prefix.
        transactionId:
          type: string
          description: The identifier of the transaction. Hex-encoded with 0x prefix.
        outputIndex:
          type: integer
          description: The index of the output.
        isSpent:
          type: boolean
          description: Tells if the output is spent in a confirmed transaction or not.
        commitmentIdSpent:
          type: string
          description: The commitment ID of the slot at which this output was spent.
        transactionIdSpent:
          type: string
          description: The transaction this output was spent with. Hex-encoded with 0x prefix.
        includedCommitmentId:
          type: string
          description: The commitment ID at which the output was included into the ledger.
        latestCommitmentId:
          type: string
          description: The current latest commitment id for which the request was made.
      required:
        - blockId
        - transactionId
        - outputIndex
        - isSpent
        - latestCommitmentId

    UTXOChangesResponse:
      description: Returns all UTXO changes of the given slot.
      properties:
        index:
          type: integer
          description: The slot index of the given slot.
        createdOutputs:
          description: The created outputs of the given slot.
          type: array
          items:
            type: string
            description: Hex-encoded with 0x prefix.
        consumedOutputs:
          description: The consumed outputs of the given slot.
          type: array
          items:
            type: string
            description: Hex-encoded with 0x prefix.
      required:
        - index
        - createdOutputs
        - consumedOutputs

    PeersResponse:
      description: Returns all peers of the node.
      type: array
      items:
        $ref: '#/components/schemas/Peer'

    PeerResponse:
      description: Returns a given peer of the node.
      properties:
        allOf:
          $ref: '#/components/schemas/Peer'

    AddPeerRequest:
      description: Adds a given peer to the node.
      properties:
        multiAddress:
          type: string
        alias:
          type: string
      required:
        - multiAddress

    AddPeerResponse:
      description: Returns information about an added peer.
      properties:
        allOf:
          $ref: '#/components/schemas/Peer'

    PruneDatabaseRequest:
      description:  Defines the request of a prune database REST API call
      properties:
        index:
          type: integer
          description: The pruning target index.
        depth:
          type: integer
          description: The pruning depth.
        targetDatabaseSize:
          type: string
          description: The target size of the database in bytes.

    PruneDatabaseResponse:
      description: Defines the response of a prune database REST API call
      properties:
        index:
          type: integer
          description: The index of the snapshot.
      required:
        - index

    CreateSnapshotRequest:
      description: Defines the request of a create snapshots REST API call.
      properties:
        index:
          type: integer
          description: The index of the snapshot.
      required:
        - index

    CreateSnapshotResponse:
      description: Defines the request of a create snapshots REST API call.
      properties:
        index:
          type: integer
          description: The index of the snapshot.
        filePath:
          type: string
          description: The file path of the snapshot file.
      required:
        - index
        - filePath